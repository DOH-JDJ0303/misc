#! /usr/bin/env Rscript

###---LOAD PACKAGES---###
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("argparse"))

###---SET ARGUMENTS---###
parser <- ArgumentParser()

parser$add_argument("-t", dest="terra_table", required = T,
                    help="Path to Terra table containing PHoeNIx pipeline results. Must in tab-separated format.")
parser$add_argument("-s", dest="samples", default = "all",
                    help="Path to a file containing samples to be included. Must match what is in the Terra table. Do not include a header. If no file is supplied then all samples in the Terra table will be included.")
parser$add_argument("-o", dest="outdir", required = T,
                    help="S3 bucket path.")
parser$add_argument("-p", dest="pipeline", required = T,
                    help="Input pipeline (phoenix or theiaprok)")
args <- parser$parse_args()

###----LOAD DATA, TRANSFORM & TRANSFER---###
# set output directory
outdir <- file.path(args$outdir)
# get list of samples to include in output
if(args$samples == "all"){
  df.samples <- read_tsv(args$terra_table) %>%
    rename(sample = 1) %>%
    mutate(sample = str_remove_all(sample, pattern = "-WA-.*"))
}else {
  df.samples <- read_tsv(args$samples, col_names = F) %>%
    rename(sample = 1) %>%
    mutate(sample = str_remove_all(sample, pattern = "-WA-.*"))
}

# prepare the Terra table depending on which Pipeline was run
# this mainly just impacts what the columns are named
if(args$pipeline == "phoenix"){
  df.terra <- read_tsv(args$terra_table) %>%
    rename(sample = 1,
           taxa = species,
           assembly_gs = assembly,
           fastq_1_gs = trimmed_read1,
           fastq_2_gs = trimmed_read2) %>%
    filter(qc_outcome == "PASS")
}
if(args$pipeline == "theiaprok"){
  df.terra <- read_tsv(args$terra_table) %>%
    rename(sample = 1,
           taxa = fastani_genus_species,
           assembly_gs = assembly_fasta,
           fastq_1_gs = read1_clean,
           fastq_2_gs = read2_clean) 
           # currently no automated QC step - to be added
}

# create file paths, etc.
df.terra <- df.terra %>%
  mutate(sample = str_remove_all(sample, pattern = "-WA-.*"),
         taxa = str_replace_all(taxa, pattern = " ", replacement = "_"),
         assembly_file = basename(assembly_gs),
         fastq_1_file = basename(fastq_1_gs),
         fastq_2_file = basename(fastq_2_gs),
         assembly_aws = paste0(outdir,"assemblies/",assembly_file),
         fastq_1 = paste0(outdir,"reads/",fastq_1_file),
         fastq_2 = paste0(outdir,"reads/",fastq_2_file)
        ) %>%
  filter(sample %in% df.samples$sample)

# function for moving files from Google to AWS
gcp2aws <- function(id, df){
  cat(paste0("Starting file transfer for ",id,":\n"))
  df.sub <- df %>%
    filter(sample == id)

  cmd_gcp_assembly <- paste0("gsutil cp ",df.sub$assembly_gs," ./")
  cmd_gcp_fastq1 <- paste0("gsutil cp ",df.sub$fastq_1_gs," ./")
  cmd_gcp_fastq2 <- paste0("gsutil cp ",df.sub$fastq_2_gs," ./")
  
  cmd_aws_assembly <- paste0("aws s3 cp ",df.sub$assembly_file," ",df.sub$assembly_aws)
  cmd_aws_fastq1 <- paste0("aws s3 cp ",df.sub$fastq_1_file," ",df.sub$fastq_1)
  cmd_aws_fastq2 <- paste0("aws s3 cp ",df.sub$fastq_2_file," ",df.sub$fastq_2)

  cmd_rm_files <- paste("rm",df.sub$assembly_file,df.sub$fastq_1_file,df.sub$fastq_2_file, sep = " ")

  exec_cmd <- function(cmd){
    cat(cmd, sep = "\n")
    system(cmd)
  }

  exec_cmd(cmd_gcp_assembly)
  exec_cmd(cmd_gcp_fastq1)
  exec_cmd(cmd_gcp_fastq2)

  exec_cmd(cmd_aws_assembly)
  exec_cmd(cmd_aws_fastq1)
  exec_cmd(cmd_aws_fastq2)
  
  exec_cmd(cmd_rm_files)
  cat("Done\n\n")
}

dev_null <- lapply(df.terra$sample, FUN = gcp2aws, df = df.terra)

###----SAVE NEW SAMPLESHEET----###
df.terra %>%
  select(sample,
         taxa,
         assembly_aws,
         fastq_1,
         fastq_2) %>%
  rename(assembly = assembly_aws) %>%
  write.csv(file = "samplesheet.csv", quote = F, row.names = F)

